/*
 * DO NOT EDIT THIS FILE. Generated by checkmk.
 * Edit the original source file "tests/old.check" instead.
 */

#include <check.h>

#line 1 "tests/old.check"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <wchar.h>
#include <locale.h>
#include "s21_string.h"


//test for s21_sprintf
START_TEST(s21_sprintf1)
{
#line 12
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%%%05d| |%05d|";
  int val = 4;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );  

}
END_TEST

START_TEST(s21_sprintf2)
{
#line 21
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 44;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );  

}
END_TEST

START_TEST(s21_sprintf3)
{
#line 30
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 444;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );  

}
END_TEST

START_TEST(s21_sprintf4)
{
#line 39
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 4440;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );  

}
END_TEST

START_TEST(s21_sprintf5)
{
#line 48
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 444404;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );  

}
END_TEST

START_TEST(s21_sprintf6)
{
#line 57
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 1234567890;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf); 

}
END_TEST

START_TEST(s21_sprintf7)
{
#line 66
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05d| |%05d|";
  int val = 0;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf); 

}
END_TEST

START_TEST(s21_sprintf8)
{
#line 75
  char buf[100] = {0};
  char s21_buf[100] = {0};
  char * format = "%05X| |%0#5x| %05o| |%0#5o|";
  int val = 1234432;
  sprintf(buf,format,val,-val,val,0);
  s21_sprintf(s21_buf,format,val,-val,val,0);
  ck_assert_str_eq(buf,s21_buf);

}
END_TEST

START_TEST(s21_sprintf_d_test)
{
#line 84
  char aa[10000] = {0};
  char bb[10000] ={0};
  char *b = bb;
  char *a =aa;
  char format[100] = {0};
  char format_flags[50] = {0};
  char * format_proto = "*.*d| ";



  for (int val = 0; val < 66; val+=6) //width and precision combinations
    for(int mask = 0; mask < 16; mask++){
      int fi =0;
      format_flags[fi] = '|';fi++;
      format_flags[fi] = '%';fi++;
      if (mask & 1) {format_flags[fi] = ' ', fi++;}
      if ((mask >> 1) & 1){format_flags[fi] = '-', fi++;}
      if ((mask >> 2) & 1){format_flags[fi] = '+', fi++;}
      if ((mask >> 3) & 1){format_flags[fi] = '0', fi++;}
      format_flags[fi]='\0';
      char format_flags_copy[50];
      strcpy(format_flags_copy,format_flags);

      strcat(format_flags,format_proto);
      strcpy(format,format_flags);
      strcat(format,format_flags);

      // printf("%s\n",format);
      // return 0;

      for(int w =0; w < 512; w+=64)
        for(int p =0; p< 512;p+=64){

          //"%0 -+*.*d| |%0 -+*.*d|" width and precision specified by wildcard

          s21_sprintf(a,format,w,p,val,w,p,-val);
          sprintf(b, format,w,p,val,w,p,-val);
          ck_assert_str_eq(a,b);


          //"%0 -+(w).(p)d| |%0 -+(w).(p)d|" width and precision
          sprintf(format,"|%%%d.%dd| ",w,p);
          char * tmp = s21_insert(format,&format_flags_copy[2],2);
          strcpy(format,tmp);
          strcat(format,tmp);
          

          s21_sprintf(a,format,val,-val);
          sprintf(b, format,val,-val);
          ck_assert_str_eq(a,b);

          //"%0 -+(w)d| |%0 -+(w)d|" no precision
          sprintf(format,"|%%%dd| ",w);
          char * tmp1 = s21_insert(format,&format_flags_copy[2],2);
          strcpy(format,tmp1);
          strcat(format,tmp1);
          

          s21_sprintf(a,format,val,-val);
          sprintf(b, format,val,-val);
          ck_assert_str_eq(a,b);

          //"%0 -+.(p)d| |%0 -+.(p)d|" no width
          sprintf(format,"|%%.%dd| ",w);
          char * tmp2 = s21_insert(format,&format_flags_copy[2],2);
          strcpy(format,tmp2);
          strcat(format,tmp2);
          

          s21_sprintf(a,format,val,-val);
          sprintf(b, format,val,-val);
          ck_assert_str_eq(a,b);

        }
      }

}
END_TEST

START_TEST(s21_sprintf_float_test1)
{
#line 161
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%05f| |%05f|";
  float val = 123.456789;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests2)
{
#line 170
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%0.5f| |%0.5f|";
  float val = 123.456789;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests3)
{
#line 179
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%0.5f| |%0.5f|";
  float val = 123.456789;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests4)
{
#line 188
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%0.5f| |%0.5f|";
  float val = 123.456789f;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests5)
{
#line 197
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%0.5f| |%#.5f|";
  float val = 123.456789f;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests6)
{
#line 206
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5f| |%+.5f|";
  float val = 12345.6789f;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests7)
{
#line 215
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5f| |%+.f|";
  float val = 1.8e+19f;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_lLf1)
{
#line 224
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5Lf| |%+.lf|";
  float val = 1.8e+19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_lLf3)
{
#line 233
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5Lf| |%+.Lf|";
  long double val = 1233.45678912;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_lLf2)
{
#line 242
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5lf| |%+.lf|";
  double val = 1233.45678912;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_lLf4)
{
#line 251
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5Lf| |%0.Lf|";
  long double val = 1.8e-19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_lLf5)
{
#line 260
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%- 10.5Lf| |%#.Lf|";
  long double val = 1.8e-19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e1)
{
#line 269
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5e| |%+.e|";
  float val = 1.8e+19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e2)
{
#line 278
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Le| |%+.4LE|";
  long double val = 1233.45678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e3)
{
#line 287
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%#100Le| |%+.4LE|";
  long double val = 10e+15;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e4)
{
#line 296
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%+le| |%lE|";
  double val = 9.9e-19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e5)
{
#line 305
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100.4Le| |%+.4LE|";
  long double val = 100001.01010;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e6)
{
#line 314
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Le| |%+.4LE|";
  long double val = 99.999678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_e7)
{
#line 323
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Le| |%+ .4LE|";
  long double val = 0.0099999678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );


}
END_TEST

START_TEST(s21_sprintf_float_tests_g1)
{
#line 333
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "% 10.5g| |%+.g|";
  float val = 1.8e+19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g2)
{
#line 342
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Lg| |%+.4LG|";
  long double val = 1233.45678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g3)
{
#line 351
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%#100Lg| |%+.4LG|";
  long double val = 10e+15;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g4)
{
#line 360
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%#+lg| |%lG|";
  double val = 9.9e-19;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g5)
{
#line 369
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100.4Lg| |%+#.4LG|";
  long double val = 100001.01010;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g6)
{
#line 378
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100LG| |%+.4Lg|";
  long double val = 99.999678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_g7)
{
#line 387
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Lg| |%+ .4LG|";
  long double val = 0.0099999678912L;
  sprintf(buf,format,val,-val);
  s21_sprintf(s21_buf,format,val,-val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_NaN_INF_f)
{
#line 396
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100f| |%+ .4f| %f";
  float val = INFINITY;
  float nan_val = NAN;
  sprintf(buf,format,val,-val,nan_val);
  s21_sprintf(s21_buf,format,val,-val,nan_val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_NaN_INF_lf)
{
#line 406
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100lf| |%+ .4lf| %lf";
  double val = INFINITY;
  double nan_val = NAN;
  sprintf(buf,format,val,-val,nan_val);
  s21_sprintf(s21_buf,format,val,-val,nan_val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_NaN_INF_Lf)
{
#line 416
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Lf| |%+ .4Lf| %Lf";
  long double val = INFINITY;
  long double nan_val = NAN;
  sprintf(buf,format,val,-val,nan_val);
  s21_sprintf(s21_buf,format,val,-val,nan_val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_NaN_INF_Le)
{
#line 426
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%100Le| |%+ .4Le| %Le";
  long double val = INFINITY;
  long double nan_val = NAN;
  sprintf(buf,format,val,-val,nan_val);
  s21_sprintf(s21_buf,format,val,-val,nan_val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_float_tests_NaN_INF_LG)
{
#line 436
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%Lg| |%+ .4Lg| %Lg";//" Lg"
  long double val = INFINITY;
  long double nan_val = NAN;
  sprintf(buf,format,val,-val,nan_val);
  s21_sprintf(s21_buf,format,val,-val,nan_val);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_str1)
{
#line 446
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%5s| |%+-# .4s| %s";//" Lg"
  char * str = "I am THE STRING";
  sprintf(buf,format,str,str,str);
  s21_sprintf(s21_buf,format,str,str,str);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_c1)
{
#line 455
  setlocale(LC_ALL,"");
  char buf[500] = {0};
  char s21_buf[500] = {0};
  char * format = "%lc";//" Lg"
  wchar_t c = L'丣'; 
  wchar_t c1 = L'丣';
  sprintf(buf,format,c1);
  s21_sprintf(s21_buf,format,c);
  ck_assert_str_eq(buf,s21_buf );

}
END_TEST

START_TEST(s21_sprintf_Wstr1)
{
#line 466
  setlocale(LC_ALL,"");
  wchar_t *w_str = L"	丠	両	丧	丣	两	严	並	丧";
  // wchar_t *w_str1 = L"両	丢	丣	两	严	並	丧";
  char * format = "|%ls|";
  char buf[500] = {0};
  char s21_buf[500] = {0};
  sprintf(buf,format,w_str);
  s21_sprintf(s21_buf,format,w_str);
  ck_assert_str_eq(buf,s21_buf);



//test for s21_to_lower
}
END_TEST

START_TEST(to_lower1)
{
#line 480
  char *test = "\" !!!! !!  azAZ-01 !/:@[`{~   !!   !\"\t\n";
  char * str1;
  ck_assert_str_eq(str1 = s21_to_lower(test), "\" !!!! !!  azaz-01 !/:@[`{~   !!   !\"\t\n");
}
END_TEST

START_TEST(to_lower2)
{
#line 484
  char * str1;
  char *test = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_str_eq(str1 = s21_to_lower(test), "abcdefghijklmnopqrstuvwxyz");
}
END_TEST

START_TEST(to_lower3)
{
#line 488
  char * str1;
  char *test = "abCdEFghIjKlMNopqRStuvWxYZ";
  ck_assert_str_eq(str1 = s21_to_lower(test), "abcdefghijklmnopqrstuvwxyz");
}
END_TEST

START_TEST(to_lower4)
{
#line 492
  char * str1;
  char *test = "abcdefghijklmnopqrstuvwxyz";
  ck_assert_str_eq(str1 = s21_to_lower(test), "abcdefghijklmnopqrstuvwxyz");
  
//test for s21_to_upper
}
END_TEST

START_TEST(to_upper1)
{
#line 498
  char * str1;
  char *test = "\" !!!! !!  azAZ-01 !/:@[`{~   !!   !\"\t\n";
  ck_assert_str_eq(str1 = s21_to_upper(test), "\" !!!! !!  AZAZ-01 !/:@[`{~   !!   !\"\t\n");
}
END_TEST

START_TEST(to_upper2)
{
#line 502
  char * str1;
  char *test = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_str_eq(str1 = s21_to_upper(test), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
}
END_TEST

START_TEST(to_upper3)
{
#line 506
  char * str1;
  char *test = "abCdEFghIjKlMNopqRStuvWxYZ";
  ck_assert_str_eq(str1 = s21_to_upper(test), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
}
END_TEST

START_TEST(to_upper4)
{
#line 510
  char * str1;
  char *test = "abcdefghijklmnopqrstuvwxyz";
  ck_assert_str_eq(str1 = s21_to_upper(test), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  
//test for s21_to_insert
}
END_TEST

START_TEST(to_insert1)
{
#line 516
  char * str1;
  char *str_insert_into = "012345";
  char *str_to_insert = "BBB";
  char result[70] = "BBB012345-0BBB12345-01BBB2345-012BBB345-0123BBB45-01234BBB5-012345BBB";
  for(int i =1 ; i < 7;i++){
    result[(i*10)-1] = '\0';
  }
  for (size_t i = 0; i <= strlen(str_insert_into) + 1; i++) {
    //(strlen(str_insert_into) + strlen(str_to_insert) + 1)
    str1 = s21_insert(str_insert_into, str_to_insert, i);
    if (i != 7)
      ck_assert_str_eq(str1, (result + i * 10));
    else
      ck_assert_ptr_null(str1);
     }

//test for s21_to_trim
}
END_TEST

START_TEST(trim1)
{
#line 534
  char * str1;
  char *test = "\" !!!! !!  azAZ-01 !/:@[`{~   !!   !\"\t\n";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "azAZ-01 !/:@[`{~");
   

}
END_TEST

START_TEST(trim2)
{
#line 540
  char * str1;
  char *test = "    ";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "");
}
END_TEST

START_TEST(trim3)
{
#line 544
  char * str1;
  char *test = "a    ";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "a");
   
}
END_TEST

START_TEST(trim4)
{
#line 549
  char * str1;
  char *test = "  a  ";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "a");
   
}
END_TEST

START_TEST(trim5)
{
#line 554
  char * str1;
  char *test = "    a";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "a");
   
}
END_TEST

START_TEST(trim6)
{
#line 559
  char * str1;
  char *test = "a    a";
  ck_assert_str_eq(str1 = s21_trim(test, " !\"\t\n"), "a    a");
  ck_assert_ptr_eq (str1,test);


//!!!!!!!!!!!

//tests for s21_memchr
}
END_TEST

START_TEST(memchr1)
{
#line 569
  char *test = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_str_eq(s21_memchr(test, 'F', 15), memchr(test, 'F', 15));
}
END_TEST

START_TEST(memchr2)
{
#line 572
  char *test = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_ptr_eq(s21_memchr(test, 'F', 5), memchr(test, 'F', 5));
}
END_TEST

START_TEST(memchr3)
{
#line 575
  char *test = "123\0456";
  ck_assert_ptr_eq(s21_memchr(test, '5', 6), memchr(test, '5', 6));
}
END_TEST

START_TEST(memchr4)
{
#line 578
  char *test = "abcdefghijklmnopqrstuvwxyz";
  ck_assert_str_eq(s21_memchr(test, 'k', 20), memchr(test, 'k', 20));
}
END_TEST

START_TEST(memchr5)
{
#line 581
  char *test = "";
  ck_assert_ptr_eq(s21_memchr(test, 'k', 1), memchr(test, 'k', 1));


//tests for s21_memcmp
}
END_TEST

START_TEST(memcmp1)
{
#line 587
  char *test1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  char *test2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_int_eq(s21_memcmp(test1, test2, 20), memcmp(test1, test2, 20));
}
END_TEST

START_TEST(memcmp2)
{
#line 591
  char *test1 = "ABCDEFGHIaKLMNOPQRSTUVWXYZ";
  char *test2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_int_eq(s21_memcmp(test1, test2, 20), memcmp(test1, test2, 20));
}
END_TEST

START_TEST(memcmp3)
{
#line 595
  char *test1 = "ABCDEEFGHIJLMNOPQRSTUVWXYZ";
  char *test2 = "ABCfEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_int_eq(s21_memcmp(test1, test2, 20), memcmp(test1, test2, 20));
}
END_TEST

START_TEST(memcmp4)
{
#line 599
  char *test1 = "123356ayt1";
  char *test2 = "123356pce1";
  ck_assert_int_eq(s21_memcmp(test1, test2, 11), memcmp(test1, test2, 11));

//tests for s21_memcpy

}
END_TEST

START_TEST(memcpy1)
{
#line 606
  char dest[100];
  char *src = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_str_eq(s21_memcpy(dest, src, 10), memcpy(dest, src, 10));
}
END_TEST

START_TEST(memcpy2)
{
#line 610
  char dest[100];
  char *src = "qwer\0ty";
  ck_assert_mem_eq(s21_memcpy(dest, src, 7), memcpy(dest, src, 7), 7);
}
END_TEST

START_TEST(memcpy3)
{
#line 614
  char dest[100];
  char *src = "qwertyopqw";
  ck_assert_str_eq(s21_memcpy(dest, src, 7), memcpy(dest, src, 7));
}
END_TEST

START_TEST(memcpy4)
{
#line 618
  char dest[100];
  char src[10] = {'\0'};
  ck_assert_str_eq(s21_memcpy(dest, src, 7), memcpy(dest, src, 7));
}
END_TEST

START_TEST(memcpy5)
{
#line 622
  char dest[100];
  char *src = "\0qweasd";
  ck_assert_mem_eq(s21_memcpy(dest, src, 7), memcpy(dest, src, 7), 7);


//tests for s21_memset

}
END_TEST

START_TEST(memset1)
{
#line 630
char test[20] = "1234567890";
ck_assert_mem_eq(s21_memset(test, '0', 7), memset(test, '0', 7), 10);
}
END_TEST

START_TEST(memset2)
{
#line 633
char test[20] = "12345\067890";
ck_assert_mem_eq(s21_memset(test, 'a', 10), memset(test, 'a', 10), 11);
}
END_TEST

START_TEST(memset3)
{
#line 636
char test[20] = "";
ck_assert_mem_eq(s21_memset(test, '1', 10), memset(test, '1', 10), 11);
//#test memset4

//tests for s21_strncat
}
END_TEST

START_TEST(strncat1)
{
#line 642
char str1[50] = "abc";
char str2[10] = "qweasdzxc";
ck_assert_str_eq(s21_strncat(str1, str2, 5), strncat(str1, str2, 5) );
//#test strncat2
}
END_TEST

START_TEST(strncat2)
{
#line 647
char str1[50] = "abc";
char str2[10] = "qweasd\0zxc";
ck_assert_str_eq(s21_strncat(str1, str2, 9), strncat(str1, str2, 9) );
}
END_TEST

START_TEST(strncat3)
{
#line 651
char str1[50] = "";
char str2[10] = "qweasdzxc";
ck_assert_str_eq(s21_strncat(str1, str2, 9), strncat(str1, str2, 9) );
}
END_TEST

START_TEST(strncat4)
{
#line 655
char str1[50] = "abc";
char str2[10] = "";
ck_assert_str_eq(s21_strncat(str1, str2, 9), strncat(str1, str2, 9) );


//tests for s21_strchr
}
END_TEST

START_TEST(strchr1)
{
#line 662
char *str = "123456asdqwe";
char c = 'g';
ck_assert_ptr_eq(s21_strchr(str, c), strchr(str, c));
}
END_TEST

START_TEST(strchr2)
{
#line 666
char *str = "123456asdqwe";
char c = 'w';
ck_assert_ptr_eq(s21_strchr(str, c), strchr(str, c));
}
END_TEST

START_TEST(strchr3)
{
#line 670
char *str = "";
char c = 'a';
ck_assert_ptr_eq(s21_strchr(str, c), strchr(str, c));
}
END_TEST

START_TEST(strchr4)
{
#line 674
char *str = "123456asdqwe";
char c = '\0';
ck_assert_str_eq(s21_strchr(str, c), strchr(str, c));
}
END_TEST

START_TEST(strchr5)
{
#line 678
char *str = "1234\056asdqwe";
char c = 'a';
ck_assert_ptr_eq(s21_strchr(str, c), strchr(str, c));


//tests for s21_strncmp

}
END_TEST

START_TEST(strncmp1)
{
#line 686
char *test1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char *test2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
ck_assert_int_eq(s21_strncmp(test1, test2, 20), strncmp(test1, test2, 20));
}
END_TEST

START_TEST(strncmp2)
{
#line 690
char *test1 = "ABCDEFGHIaKLMNOPQRSTUVWXYZ";
char *test2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
ck_assert_int_eq(s21_strncmp(test1, test2, 20), strncmp(test1, test2, 20));
}
END_TEST

START_TEST(strncmp3)
{
#line 694
char *test1 = "ABCfDEFGHIJLMNOPQRSTUVWXYZ";
char *test2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
ck_assert_int_eq(s21_strncmp(test1, test2, 20), strncmp(test1, test2, 20));
}
END_TEST

START_TEST(strncmp4)
{
#line 698
char *test1 = "123\0356abc";
char *test2 = "123\0356dce";
ck_assert_int_eq(s21_strncmp(test1, test2, 10), strncmp(test1, test2, 7));

//tests for s21_strncpy

}
END_TEST

START_TEST(strncpy1)
{
#line 705
  char dest[100];
  char *src = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  ck_assert_str_eq(s21_strncpy(dest, src, 26), strncpy(dest, src, 26));
}
END_TEST

START_TEST(strncpy2)
{
#line 709
  char dest[100];
  char *src = "qwe\0asd";
  ck_assert_str_eq(s21_strncpy(dest, src, 7), strncpy(dest, src, 7));
}
END_TEST

START_TEST(strncpy3)
{
#line 713
  char dest[100];
  char *src = "";
  ck_assert_str_eq(s21_strncpy(dest, src, 1), strncpy(dest, src, 1));


//tests for s21_strcspn

}
END_TEST

START_TEST(strcspn1)
{
#line 721
  char *str1 = "qweasdzxciopkjl";
  char *str2 = "ol";
  ck_assert_int_eq(s21_strcspn(str1, str2), strcspn(str1, str2));
}
END_TEST

START_TEST(strcspn2)
{
#line 725
  char *str1 = "qweasdzxciopkjl";
  char *str2 = "oal";
  ck_assert_int_eq(s21_strcspn(str1, str2), strcspn(str1, str2));
}
END_TEST

START_TEST(strcspn3)
{
#line 729
  char *str1 = "qweasdzxciopkjl";
  char *str2 = "bn\0oal";
  ck_assert_int_eq(s21_strcspn(str1, str2), strcspn(str1, str2));
}
END_TEST

START_TEST(strcspn4)
{
#line 733
  char *str1 = "qweasdzxciopkjl";
  char *str2 = "";
  ck_assert_int_eq(s21_strcspn(str1, str2), strcspn(str1, str2));
}
END_TEST

START_TEST(strcspn5)
{
#line 737
  char *str1 = "";
  char *str2 = "abc";
  ck_assert_int_eq(s21_strcspn(str1, str2), strcspn(str1, str2));


//test for s21_strerror

}
END_TEST

START_TEST(s21_strerror1)
{
#line 745
  for (int i = 0; i < 200; i++) 
    ck_assert_str_eq(s21_strerror(i), strerror(i));


//tests for s21_strlen

}
END_TEST

START_TEST(strlen1)
{
#line 752
  char str[20] = "1234567890";
  ck_assert_int_eq (s21_strlen(str),strlen(str));
}
END_TEST

START_TEST(strlen2)
{
#line 755
  char str[20] = "123\04567890";
  ck_assert_int_eq (s21_strlen(str),strlen(str));
}
END_TEST

START_TEST(strlen3)
{
#line 758
  char str[20] = "123\04567890\0\0\0";
  ck_assert_int_eq (s21_strlen(str),strlen(str));
}
END_TEST

START_TEST(strlen4)
{
#line 761
  char str[20] = "";
  ck_assert_int_eq (s21_strlen(str),strlen(str));


//tests for s21_strpbrk

}
END_TEST

START_TEST(strpbrk1)
{
#line 768
  char str1[20] = "1234567890a5";
  char str2[5] = "bca";
  ck_assert_str_eq (s21_strpbrk(str1, str2),strpbrk(str1, str2));
}
END_TEST

START_TEST(strpbrk2)
{
#line 772
  char str1[20] = "12345678905";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strpbrk(str1, str2),strpbrk(str1, str2));
}
END_TEST

START_TEST(strpbrk3)
{
#line 776
  char str1[20] = "12\034567890a5";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strpbrk(str1, str2),strpbrk(str1, str2));
}
END_TEST

START_TEST(strpbrk4)
{
#line 780
  char str1[20] = "";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strpbrk(str1, str2),strpbrk(str1, str2));
}
END_TEST

START_TEST(strpbrk5)
{
#line 784
  char str1[20] = "1234567890a5";
  char str2[5] = "";
  ck_assert_ptr_eq (s21_strpbrk(str1, str2),strpbrk(str1, str2));


//tests for s21_strrchr

}
END_TEST

START_TEST(strrchr1)
{
#line 792
  char *str = "129349596789qwe";
  ck_assert_str_eq(s21_strrchr(str, '9'), strrchr(str, '9'));
}
END_TEST

START_TEST(strrchr2)
{
#line 795
  char *str = "12934596789qwe";
  ck_assert_ptr_eq(s21_strrchr(str, 'a'), strrchr(str, 'a'));
}
END_TEST

START_TEST(strrchr3)
{
#line 798
  char *str = "";
  ck_assert_ptr_eq(s21_strrchr(str, 'a'), strrchr(str, 'a'));
}
END_TEST

START_TEST(strrchr4)
{
#line 801
  char *str = "12934596e789qwe";
  ck_assert_str_eq(s21_strrchr(str, 'e'), strrchr(str, 'e'));
}
END_TEST

START_TEST(strrchr5)
{
#line 804
  char *str = "12934596e789qwe";
  ck_assert_str_eq(s21_strrchr(str, '1'), strrchr(str, '1'));


//tests for s21_strstr

}
END_TEST

START_TEST(strstr1)
{
#line 811
  char str1[20] = "12\034567890bc5";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strstr(str1, str2),strstr(str1, str2));
}
END_TEST

START_TEST(strstr2)
{
#line 815
  char str1[20] = "1234567890abca5";
  char str2[5] = "bca";
  ck_assert_str_eq (s21_strstr(str1, str2),strstr(str1, str2));
}
END_TEST

START_TEST(strstr3)
{
#line 819
  char str1[20] = "1234567890ab5";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strstr(str1, str2),strstr(str1, str2));
}
END_TEST

START_TEST(strstr4)
{
#line 823
  char str1[20] = "12345678905";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strstr(str1, str2),strstr(str1, str2));
}
END_TEST

START_TEST(strstr5)
{
#line 827
  char str1[20] = "";
  char str2[5] = "bca";
  ck_assert_ptr_eq (s21_strstr(str1, str2),strstr(str1, str2));
}
END_TEST

START_TEST(strstr6)
{
#line 831
  char *str1 = "abcdefgh";
  char str2[5] = "\0";
  ck_assert_str_eq (s21_strstr(str1, str2),strstr(str1, str2));


//tests for s21_strtok

}
END_TEST

START_TEST(strtok1)
{
#line 839
  char test1[50] = "str1|str2|str3";
  char test2[50] = "str1|str2|str3";
  ck_assert_str_eq(s21_strtok(test1, "|"), strtok(test2, "|"));
  ck_assert_str_eq(s21_strtok(NULL, "|"), strtok(NULL, "|"));
  ck_assert_str_eq(s21_strtok(NULL, "|"), strtok(NULL, "|"));
  ck_assert_ptr_eq(s21_strtok(NULL, "|"), strtok(NULL, "|"));
}
END_TEST

START_TEST(strtok2)
{
#line 846
  char test1[50] = "";
  char test2[50] = "";
  ck_assert_ptr_eq(s21_strtok(test1, "?"), strtok(test2, "?"));
}
END_TEST

START_TEST(strtok3)
{
#line 850
  char test1[50] = "abc";
  char test2[50] = "abc";
  ck_assert_str_eq(s21_strtok(test1, "1"), strtok(test2, "1"));
}
END_TEST

START_TEST(strtok4)
{
#line 854
  char test1[50] = "abc\0qwe,asd,iop,ewq";
  char test2[50] = "abc\0qwe,asd,iop,ewq";
  ck_assert_str_eq(s21_strtok(test1, ","), strtok(test2, ","));
  ck_assert_ptr_eq(s21_strtok(NULL, ","), strtok(NULL, ","));


//tests for s21_sscanf
}
END_TEST

START_TEST(sscanf1)
{
#line 862
  int i;
  int i_2;
  char str[50] = {'\0'};
  char str_2[50] = {'\0'};
  float j;
  float j_2;
  float f;
  float f_2;
  char str2[50] = {'\0'};
  char str2_2[50] = {'\0'};
  char str3[50] = {'\0'};
  char str3_2[50] = {'\0'};
  s21_sscanf("hex: 0x7ffcc8f91ac0 sdfg -456. ghjkk 1.05e+5 fggg", "hex: %i %s %f %s %2f %s", &i, str,
             &j, str2, &f, str3);
  sscanf("hex: 0x7ffcc8f91ac0 sdfg -456. ghjkk 1.05e+5 fggg", "hex: %i %s %f %s %2f %s", &i_2, str_2, &j_2,
         str2_2, &f_2, str3_2);
  ck_assert_int_eq(i,i_2);
  ck_assert_str_eq(str, str_2);
  ck_assert_float_eq(j, j_2);
  ck_assert_float_eq(f, f_2);
  ck_assert_str_eq(str2, str2_2);
  ck_assert_str_eq(str3, str3_2);
}
END_TEST

START_TEST(sscanf2)
{
#line 885
  double df = 0;
  double df2 = 0;
  unsigned int x = 0;
  unsigned int x2 = 0;
  unsigned o = 0;
  unsigned o2 = 0;
  int d = 0;
  int d2 = 0;
  char c;
  char c2;
  char str[50] = {'\0'};
  char str2[50] = {'\0'};
  s21_sscanf("10002.0003567 hex: 0xff o: 010405030502 d: 1111113454",\
            "%lf hex: %x o: %o d: %4d %c %s",&df, &x, &o, &d, &c, str);
  sscanf("10002.0003567 hex: 0xFF o: 010405030502 d: 1111113454",\
            "%lf hex: %x o: %o d: %4d %c %s",&df2,  &x2, &o2, &d2, &c2, str2);
  ck_assert_double_eq(df, df2);
  ck_assert_int_eq(x, x2);
  ck_assert_int_eq(o, o2);
  ck_assert_int_eq(d, d2);
  ck_assert_int_eq(c, c2);
  ck_assert_str_eq(str, str2);
}
END_TEST

START_TEST(sscanf3)
{
#line 908
  double df = 0;
  double df2 = 0;
  long unsigned int lui = 0;
  long unsigned int lui2 = 0;
  char str[50];
  char str2[50];
  char c = 0;
  char c2 = 0;
  s21_sscanf("df: 1.05e-9 17900000345gfddsddff", "df: %lf %lu %*c %3s", &df, &lui, str);
  sscanf("df: 1.05e-9 17900000345gfddsddff", "df: %lf %lu %*c %3s", &df2, &lui2, str2);
  ck_assert_double_eq(df, df2);
  ck_assert_int_eq(lui, lui2);
  ck_assert_str_eq(str, str2);
  ck_assert_int_eq(c, c2);

}
END_TEST

START_TEST(sscanf4)
{
#line 924
  long int lli = 0;
  long int lli2 = 0;
  short int shi = 0;
  short int shi2 = 0;
  char str[50] = {'\0'};
  char str2[50] = {'\0'};
  s21_sscanf("long long signed int: -0103657352502030502 0412 0405102350130", "long long signed int: %li %hd %s", &lli, &shi, str);
  sscanf("long long signed int: -0103657352502030502 0412 0405102350130", "long long signed int: %li %hd %s", &lli2, &shi2, str2);
  ck_assert_int_eq(lli, lli2);
  ck_assert_int_eq(shi, shi2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_e_str)
{
#line 937
  double d;
  double d2;
  char str[50] = {'\0'};
  char str2[50] = {'\0'};
  s21_sscanf("1.0003e+12qwerty", "%lf %s", &d, str);
  sscanf("1.0003e+12qwerty", "%lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_1e_str)
{
#line 947
  double d = 0;
  double d2 = 0;
  char str[50] = {'\0'};
  char str2[50] = {'\0'};
  s21_sscanf("-1.0003e+12qwerty", "%1lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%1lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_2e_str)
{
#line 957
  double d;
  double d2;
  char str[50] = {'\0'};
  char str2[50] = {'\0'};
  s21_sscanf("-1.0003e+12qwerty", "%2lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%2lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_3e_str)
{
#line 967
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%3lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%3lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_4e_str)
{
#line 977
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%4lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%4lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_5e_str)
{
#line 987
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%5lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%5lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_6e_str)
{
#line 997
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%6lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%6lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_7e_str)
{
#line 1007
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%7lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%7lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_8e_str)
{
#line 1017
  double d = 0;
  double d2 = 0;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%8lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%8lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_9e_str)
{
#line 1027
  double d = 0;
  double d2 = 0;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%9lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%9lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_10e_str)
{
#line 1037
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%10lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%10lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);

}
END_TEST

START_TEST(sscanf_11e_str)
{
#line 1047
  double d;
  double d2;
  char str[50];
  char str2[50];
  s21_sscanf("-1.0003e+12qwerty", "%11lf %s", &d, str);
  sscanf("-1.0003e+12qwerty", "%11lf %s", &d2, str2);
  ck_assert_double_eq(d, d2);
  ck_assert_str_eq(str, str2);
}
END_TEST

int main(void)
{
    Suite *s1 = suite_create("Core");
    TCase *tc1_1 = tcase_create("Core");
    SRunner *sr = srunner_create(s1);
    int nf;

    suite_add_tcase(s1, tc1_1);
    tcase_add_test(tc1_1, s21_sprintf1);
    tcase_add_test(tc1_1, s21_sprintf2);
    tcase_add_test(tc1_1, s21_sprintf3);
    tcase_add_test(tc1_1, s21_sprintf4);
    tcase_add_test(tc1_1, s21_sprintf5);
    tcase_add_test(tc1_1, s21_sprintf6);
    tcase_add_test(tc1_1, s21_sprintf7);
    tcase_add_test(tc1_1, s21_sprintf8);
    tcase_add_test(tc1_1, s21_sprintf_d_test);
    tcase_add_test(tc1_1, s21_sprintf_float_test1);
    tcase_add_test(tc1_1, s21_sprintf_float_tests2);
    tcase_add_test(tc1_1, s21_sprintf_float_tests3);
    tcase_add_test(tc1_1, s21_sprintf_float_tests4);
    tcase_add_test(tc1_1, s21_sprintf_float_tests5);
    tcase_add_test(tc1_1, s21_sprintf_float_tests6);
    tcase_add_test(tc1_1, s21_sprintf_float_tests7);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_lLf1);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_lLf3);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_lLf2);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_lLf4);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_lLf5);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e1);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e2);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e3);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e4);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e5);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e6);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_e7);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g1);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g2);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g3);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g4);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g5);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g6);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_g7);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_NaN_INF_f);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_NaN_INF_lf);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_NaN_INF_Lf);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_NaN_INF_Le);
    tcase_add_test(tc1_1, s21_sprintf_float_tests_NaN_INF_LG);
    tcase_add_test(tc1_1, s21_sprintf_str1);
    tcase_add_test(tc1_1, s21_sprintf_c1);
    tcase_add_test(tc1_1, s21_sprintf_Wstr1);
    tcase_add_test(tc1_1, to_lower1);
    tcase_add_test(tc1_1, to_lower2);
    tcase_add_test(tc1_1, to_lower3);
    tcase_add_test(tc1_1, to_lower4);
    tcase_add_test(tc1_1, to_upper1);
    tcase_add_test(tc1_1, to_upper2);
    tcase_add_test(tc1_1, to_upper3);
    tcase_add_test(tc1_1, to_upper4);
    tcase_add_test(tc1_1, to_insert1);
    tcase_add_test(tc1_1, trim1);
    tcase_add_test(tc1_1, trim2);
    tcase_add_test(tc1_1, trim3);
    tcase_add_test(tc1_1, trim4);
    tcase_add_test(tc1_1, trim5);
    tcase_add_test(tc1_1, trim6);
    tcase_add_test(tc1_1, memchr1);
    tcase_add_test(tc1_1, memchr2);
    tcase_add_test(tc1_1, memchr3);
    tcase_add_test(tc1_1, memchr4);
    tcase_add_test(tc1_1, memchr5);
    tcase_add_test(tc1_1, memcmp1);
    tcase_add_test(tc1_1, memcmp2);
    tcase_add_test(tc1_1, memcmp3);
    tcase_add_test(tc1_1, memcmp4);
    tcase_add_test(tc1_1, memcpy1);
    tcase_add_test(tc1_1, memcpy2);
    tcase_add_test(tc1_1, memcpy3);
    tcase_add_test(tc1_1, memcpy4);
    tcase_add_test(tc1_1, memcpy5);
    tcase_add_test(tc1_1, memset1);
    tcase_add_test(tc1_1, memset2);
    tcase_add_test(tc1_1, memset3);
    tcase_add_test(tc1_1, strncat1);
    tcase_add_test(tc1_1, strncat2);
    tcase_add_test(tc1_1, strncat3);
    tcase_add_test(tc1_1, strncat4);
    tcase_add_test(tc1_1, strchr1);
    tcase_add_test(tc1_1, strchr2);
    tcase_add_test(tc1_1, strchr3);
    tcase_add_test(tc1_1, strchr4);
    tcase_add_test(tc1_1, strchr5);
    tcase_add_test(tc1_1, strncmp1);
    tcase_add_test(tc1_1, strncmp2);
    tcase_add_test(tc1_1, strncmp3);
    tcase_add_test(tc1_1, strncmp4);
    tcase_add_test(tc1_1, strncpy1);
    tcase_add_test(tc1_1, strncpy2);
    tcase_add_test(tc1_1, strncpy3);
    tcase_add_test(tc1_1, strcspn1);
    tcase_add_test(tc1_1, strcspn2);
    tcase_add_test(tc1_1, strcspn3);
    tcase_add_test(tc1_1, strcspn4);
    tcase_add_test(tc1_1, strcspn5);
    tcase_add_test(tc1_1, s21_strerror1);
    tcase_add_test(tc1_1, strlen1);
    tcase_add_test(tc1_1, strlen2);
    tcase_add_test(tc1_1, strlen3);
    tcase_add_test(tc1_1, strlen4);
    tcase_add_test(tc1_1, strpbrk1);
    tcase_add_test(tc1_1, strpbrk2);
    tcase_add_test(tc1_1, strpbrk3);
    tcase_add_test(tc1_1, strpbrk4);
    tcase_add_test(tc1_1, strpbrk5);
    tcase_add_test(tc1_1, strrchr1);
    tcase_add_test(tc1_1, strrchr2);
    tcase_add_test(tc1_1, strrchr3);
    tcase_add_test(tc1_1, strrchr4);
    tcase_add_test(tc1_1, strrchr5);
    tcase_add_test(tc1_1, strstr1);
    tcase_add_test(tc1_1, strstr2);
    tcase_add_test(tc1_1, strstr3);
    tcase_add_test(tc1_1, strstr4);
    tcase_add_test(tc1_1, strstr5);
    tcase_add_test(tc1_1, strstr6);
    tcase_add_test(tc1_1, strtok1);
    tcase_add_test(tc1_1, strtok2);
    tcase_add_test(tc1_1, strtok3);
    tcase_add_test(tc1_1, strtok4);
    tcase_add_test(tc1_1, sscanf1);
    tcase_add_test(tc1_1, sscanf2);
    tcase_add_test(tc1_1, sscanf3);
    tcase_add_test(tc1_1, sscanf4);
    tcase_add_test(tc1_1, sscanf_e_str);
    tcase_add_test(tc1_1, sscanf_1e_str);
    tcase_add_test(tc1_1, sscanf_2e_str);
    tcase_add_test(tc1_1, sscanf_3e_str);
    tcase_add_test(tc1_1, sscanf_4e_str);
    tcase_add_test(tc1_1, sscanf_5e_str);
    tcase_add_test(tc1_1, sscanf_6e_str);
    tcase_add_test(tc1_1, sscanf_7e_str);
    tcase_add_test(tc1_1, sscanf_8e_str);
    tcase_add_test(tc1_1, sscanf_9e_str);
    tcase_add_test(tc1_1, sscanf_10e_str);
    tcase_add_test(tc1_1, sscanf_11e_str);

    srunner_run_all(sr, CK_ENV);
    nf = srunner_ntests_failed(sr);
    srunner_free(sr);

    return nf == 0 ? 0 : 1;
}
